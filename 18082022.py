import math
# 11 Сформировать список из N членов последовательности Для N = 5: 1, -3, 9, -27,
#  81 и т.д.
""" генератор списков """


# 12 Для натурального n создать словарь индекс-значение, состоящий из элементов
# последовательности 3n + 1. Для n = 6: {1: 4, 2: 7, 3: 10, 4: 13, 5: 16, 6: 19}
""" генератор словарей """
""" dict_n = {n: 3 * n + 1 for n in range(1, 7)}
print(dict_n) """


# 13 Пользователь задаёт две строки. Определить количество вхождений одной строки
# в другой.
""" first_str = input('Введите первую строку: ')
second_str = input('Введите вторую строку: ') """


# 14 Подсчитать сумму цифр в вещественном числе.
""" n = (str(float(input('Введите вещественное число: ')))).replace('.','')
a = int(n)
summa = 0

while a > 0:
    digit_a = a % 10
    summa = summa + digit_a
    a = a // 10
print(summa) """


# 15 Написать программу получающую набор произведений чисел от 1 до N.
# Пример: пусть N = 4, тогда [ 1, 2, 6, 24 ]
""" number = int(input("Введите число: "))
import math
math.factorial(4)
sequence = [math.factorial(i+1) for i in range(number)]
print(f"Список из  N членов последовательности: {sequence}") """


# 16 Задать список из n чисел последовательности (1+1/n)**n и вывести на экран
# их сумму
""" number_list = {int(input('Введите число последовательностей: '))}
print(number_list)
sequences = (1+1/number_list)**number_list
print(sequences) """

# 17 Задать список из N элементов, заполненных числами из [-N, N].
# Найти произведение элементов на указанных позициях. Позиции хранятся в файле
# file.txt в одной строке одно число


# 18 Реализовать алгоритм перемешивания списка.


# Практическое задание задание
